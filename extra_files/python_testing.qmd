---
title: "testing code"
subtitle: "Macro"
author: ""
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
execute: 
  warning: false
    
---



The code below is just testing the chapter 5 solow model 

```{python}

import pandas as pd

parameters = {
    'Simulation Period (yrs)': 100,
    's': 0.2,
    'delta': 0.15,
    'alpha': 1/3,
    'A': 1, 
    'L': 1, 
    'k_star_initial': None,  # Initialize with None
}

# Extract values from the parameters to calculate for k_star_initial
s = parameters['s']
delta = parameters['delta']
alpha = parameters['alpha']
A = parameters['A']
L = parameters['L']

# Calculate k_star_initial and update parameters
k_star_initial = (s * A / delta) ** (1/(1-alpha))
parameters['k_star_initial'] = k_star_initial


quantitative_experiments = {
    's': [
        {'new_value': 0.3, 'time_period': 1, 'length': 90}
    ],
    'delta': [
        {'new_value': 0.2, 'time_period': 1, 'length': 90}
    ],
    'alpha': [
        {'new_value': 0.34, 'time_period': 1, 'length': 90}
    ],
    'A': [
        {'new_value': 2, 'time_period': 1, 'length': 90}
    ],
    'L': [
        {'new_value': 1.2, 'time_period': 1, 'length': 90}
    ]
} # to add just use the same format & change parameter


# Initialize the DataFrame
num_periods = parameters['Simulation Period (yrs)'] + 1
df = pd.DataFrame({
    'Period': range(num_periods),
    's': [parameters['s']] * num_periods,
    'delta': [parameters['delta']] * num_periods,
    'alpha': [parameters['alpha']] * num_periods,
    'A': [parameters['A']] * num_periods,
    'L': [parameters['L']] * num_periods,
    'Delta k': [0.0] * num_periods, # will be calculated
    'k*': [parameters['k_star_initial']] * num_periods,
    'Y': [0.0] * num_periods, # will be calculated 
    'K': [0.0] * num_periods, # will be calculated
    'C': [0.0] * num_periods, # will be calculated    
})

# Apply Quantitative Experiments
for param, changes_list in quantitative_experiments.items():
    for changes in changes_list:
        for period in range(changes['time_period'], changes['time_period'] + changes['length']):
            if period < num_periods:
                df.at[period, param] = changes['new_value']

# calculate delta k
def calculate_Delta_k(df, row_index):
    if row_index == 0:
        return 0.0
    else:
        delta_k = df.at[row_index, 's'] * ((df.at[row_index, 'A'] * df.at[row_index - 1, 'k*']) ** (df.at[row_index, 'alpha'])) - df.at[row_index, 'delta'] * df.at[row_index - 1, 'k*']
        return delta_k # updated for 05ch

# calculate k* (def python functions can have *)
def calculate_k_star(df, row_index, k_star_initial):
    if row_index == 0:
        k_star_value = k_star_initial
    else:
        k_star_value = (df.at[row_index - 1, 'k*'] + df.at[row_index, 'Delta k'])
    return k_star_value # def doesn't change from 05 to 06

# Calculating 'C'
def calculate_C(df, row_index):
    C = (1 - df.at[row_index, 's']) * df.at[row_index, 'A'] * df.at[row_index, 'k*'] ** df.at[row_index, 'alpha']
    return C

# calculating 'K'
def calculate_K(df, row_index):
    K = df.at[row_index, 'k*'] * df.at[row_index, 'L']
    return K

# calculating 'Y' K needs to be calculated first for Y to work.
def calculate_Y(df, row_index):
    Y =  df.at[row_index, 'A'] * ((df.at[row_index, 'K'] ** df.at[row_index, 'alpha']) * (df.at[row_index, 'L'] ** (1 - df.at[row_index, 'alpha'])))
    return Y

# Loop def functions through DataFrame
for i in range(len(df)):
    df.at[i, 'Delta k'] = calculate_Delta_k(df, i)
    df.at[i, 'k*'] = calculate_k_star(df, i, k_star_initial)
    df.at[i, 'C'] = calculate_C(df, i)
    df.at[i, 'K'] = calculate_K(df, i)
    df.at[i, 'Y'] = calculate_Y(df, i)

df

# Code to download as Excel
#df.to_excel("output.xlsx", index=False) 

```




this model does python solow model project question 1 C & it is structure after my main codes.

the code for the condition to stop once epsilon is met can just be copy into other models as only the end changes and no other part of the code does.

Once thing to notice is this code actually change the for i calculations part at the end, which just made it shorter, but this can cause conflicts with def with two functions, specially chapter 13 where they have to be calculated in order.

```{python}
# this model does python solow model project question 1 C & it is structure after my main codes.

# the code for the condition to stop once epsilon is met can just be copy into other models as only the end changes and no other part of the code does.

# Once thing to notice is this code actually change the for i calculations part at the end, which just made it shorter, but this can cause conflicts with def with two functions, specially chapter 13 where they have to be calculated in order.

# Define exogenous variables and parameters values.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

parameters = {
    'Simulation Period (yrs)': 55,
    'K_0': 100.0, # K_0 is 'capital' & eventually capital_steady_state
    'L': 1000.0, # needed to calculate output
    'A': 1.0,
    'd': 0.15, # depreciation
    's': 0.2,
    'alpha': 1/3,
    'epsilon': 10
}

quantitative_experiments = {
    's': [
        {'new_value': 0.2, 'time_period': 10, 'length': 100}
    ]
} # to add just use the same format & change parameter

# Initialize the DataFrame
num_periods = parameters['Simulation Period (yrs)'] + 1
df = pd.DataFrame({
    'Period': range(num_periods),
    'Capital': [0.0] * num_periods, # K_0 & eventually capital_steady_state (K*), but K* is in its own column (K_star)
    'Output': [0.0] * num_periods, # Y & eventually output_steady_state(Y*), but Y* is its own column
    'Investment': [0.0] * num_periods, # will be calculated
    'Depreciation': [0.0] * num_periods, # will be calculated
    'Change in Capital': [0.0] * num_periods, # will be calculated
    'Epsilon': [0.0] * num_periods, # will be calculated 
    's': [parameters['s']] * num_periods,
    'd': [parameters['d']] * num_periods,
    'A': [parameters['A']] * num_periods,
    'alpha': [parameters['alpha']] * num_periods,
    'L': [parameters['L']] * num_periods,
    'K_star': [0.0] * num_periods, # will be calculated
    'Y_star': [0.0] * num_periods
})

# Apply Quantitative Experiments
for param, changes_list in quantitative_experiments.items():
    for changes in changes_list:
        for period in range(changes['time_period'], changes['time_period'] + changes['length']):
            if period < num_periods:
                df.at[period, param] = changes['new_value']



def production_function(df, row_index, A, K_0, L, alpha): # 'output'
    if row_index == 0:
      Output = A * K_0 ** alpha * L ** (1 - alpha)
    else:
      Output =  df.at[row_index, 'A'] * df.at[row_index, 'Capital'] ** df.at[row_index, 'alpha'] * df.at[row_index, 'L'] ** (1 - df.at[row_index, 'alpha']) # formula 
    return Output


def calc_K_star(df, row_index, L, s, d, A, alpha): # capital_steady_state
    '''This is to calculat capital_steady_state and is use to find epsilon by doing: 'Capital' - capital_steady_state. Which capital steady state is K_star
    now the question if this calculation is calculated only once or at every row. I'm assuming is every row, but research shows it is only once
    Ok i may have to remove this from the df, or keep it and add a constant K_star.
    It is calculated every period due to the quantitative experiment where s can change so that changes capital steady state. '''
    if row_index == 0:
      K_star = L * ((s * A)/d) ** (1.0/(1.0 - alpha))
    else: 
      A = df.at[row_index, 'A']
      s = df.at[row_index, 's']
      L = df.at[row_index, 'L']
      d = df.at[row_index, 'd']
      alpha = df.at[row_index, 'alpha']
      K_star =  L * ((s * A)/d) ** (1.0/(1.0 - alpha)) # formula
    return K_star

def calc_Y_star(df, row_index, L, s, d, A, alpha):
    if row_index == 0:
      Y_star = A ** (1.0/(1.0 - alpha)) * (s/d) ** (alpha/ (1.0 - alpha)) * L
    else:
      A = df.at[row_index, 'A']
      s = df.at[row_index, 's']
      L = df.at[row_index, 'L']
      d = df.at[row_index, 'd']
      alpha = df.at[row_index, 'alpha']
      Y_star = A ** (1.0/(1.0 - alpha)) * (s/d) ** (alpha/ (1.0 - alpha)) * L # formula
    return Y_star

def calc_Capital(df, row_index, K_0): # capital initial, we get epsilon by getting this K_0 or 'Capital'minus capital_steay_state
    if row_index == 0:
        return K_0
    else:
      Capital = df.at[row_index - 1, 'Capital'] + df.at[row_index - 1, 'Change in Capital']
    return  Capital


def calc_Investment(df, row_index):
    s = df.at[row_index, 's']
    Output = df.at[row_index, 'Output']
    Investment = s * Output
    return Investment

def calc_Depreciation(df, row_index):
    d = df.at[row_index, 'd']
    Capital = df.at[row_index, 'Capital']
    Depreciation = d * Capital
    return Depreciation

def calc_change_in_Capital(df, row_index):
    investment = df.at[row_index, 'Investment']
    Depreciation = df.at[row_index, 'Depreciation']
    Change_in_Capital = investment - Depreciation
    return Change_in_Capital

def calc_epsilon_value(df, row_index):
    capital = df.at[row_index, 'Capital']
    capital_steady_state = df.at[row_index, 'K_star']
    Epsilon = abs(capital - capital_steady_state)
    return Epsilon


# Loop def functions through DataFrame
for i in range(len(df)):
    # Existing calculations
    df.at[i, 'Capital'] = calc_Capital(df, i, parameters['K_0'])
    df.at[i, 'Output'] = production_function(df, i, parameters['A'], parameters['K_0'], parameters['L'], parameters['alpha'])
    df.at[i, 'K_star'] = calc_K_star(df, i, parameters['A'], parameters['s'], parameters['L'], parameters['alpha'], parameters['d'])
    df.at[i, 'Y_star'] = calc_Y_star(df, i, parameters['A'], parameters['s'], parameters['L'], parameters['alpha'], parameters['d'])
    df.at[i, 'Investment'] = calc_Investment(df, i)
    df.at[i, 'Depreciation'] = calc_Depreciation(df, i)
    df.at[i, 'Change in Capital'] = calc_change_in_Capital(df, i)
    df.at[i, 'Epsilon'] = calc_epsilon_value(df, i)

    # New stopping condition
    if df.at[i, 'Epsilon'] < parameters['epsilon']:
        print('Stopping condition met at period:', i)
        print('Capital:', '{:,.2f}'.format(df.at[i, 'Capital']))
        print('Output:', '{:,.2f}'.format(df.at[i, 'Output']))
        print('Investment:', '{:,.2f}'.format(df.at[i, 'Investment']))
        print('Depreciation: ', '{:,.2f}'.format(df.at[i, 'Depreciation']))
        print('Change in capital: ', '{:,.2f}'.format(df.at[i, 'Change in Capital']))
        print('Epsilon', '{:,.2f}'.format(df.at[i, 'Epsilon']))
        df = df[:i+1]
        # display(df) # uncheck or check for df
        break  # Exit the loop

```